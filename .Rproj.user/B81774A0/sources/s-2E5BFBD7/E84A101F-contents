###############################################
############## QUALITY CONTROL ################
###############################################
# Para plataformas que usam affy no pre-processamento
# antes de iniciar a analise, ter uma tabela 'samples.txt' que relacione os GSM e as amostras.
# Criar uma pasta especifica para o experimento, e colocar nela os arquivos .CEL.

library(affy)
library(hgu133plus2.db)
library(limma)
library(affyPLM)
library(biomaRt)

# Setwd
setwd('~/Área de Trabalho/exp1/')

# Ler e transformar os arquivos .CEL
raw <- ReadAffy()

# Importar os dados das amostras
samples <- read.table('samples.txt', stringsAsFactors = F, header = F, col.names = c('GSMid', "names"))

# Estabelecer os grupos do experimento
targets <- as.factor(rep(c("tr_0", "tr_8", "tr_16", "tr_24", "tr_48", "tr_96"), 3))

# Histograma de densidades dos arrays
hist(raw)

# Boxplot das intensidades de cada array
par(mar=c(8,8,1,1))
boxplot(raw, las = 2)

# MAplots para cada array
# par(mfrow = c(2,3)) setar o parametro de acordo com o numero de amostras
MAplot(raw, plot.method="smoothScatter")

## Avaliar a degradacao do RNA
par(mfrow = c(1,1))
deg <- AffyRNAdeg(raw)
plotAffyRNAdeg(deg)

#RMA normalization method
eset <- rma(raw)

# MAplot depois da normalizacao
# par(mfrow = c(2,3)) setar o parametro de acordo com o numero de amostras
MAplot(eset, plot.method = "smoothScatter")

# assign expression data to my_exp
my_exp <- exprs(eset)

# Salvar a tabela de expressao
save(my_exp, file = 'my_exp.RData')

##########################################
########### PCA e DENDROGRAMA ############
##########################################

# PCA 
# Estabeleca os grupos do experimento de acordo com as amostras
targets <- as.factor(rep(c("tr_0", "tr_8", "tr_16", "tr_24", "tr_48", "tr_96"), 3))

# Retirar os NAs
data.exprs <- as.data.frame(na.omit(my_exp))

# Nomear as colunas da tabela de expressao de acordo com os grupos
colnames(data.exprs) <- targets

# Obter a matrix transposta
tdata.exprs <- t(data.exprs)

# Estabelecer o esquema de cores
lev <- levels(targets)
color.code <- colorRampPalette(c('blue','red','green', "yellow"))(length(lev))

# calcular a PCA
pca <- prcomp(tdata.exprs)

# Plotar
plot(x = pca$x[,1:2], pch = 19, col = color.code[targets], main = "PCA after normalization")
text(pca$x[,1]-1,pca$x[,2]-1, samples$names, cex=0.8) 

# Dendrograma
rownames(tdata.exprs) <- samples$names
d <- dist(as.matrix(tdata.exprs), method = "euclidean")
clusters <- hclust(d)
par(mar = c(1, 1, 1, 1))
plot(clusters)

################################################
########## DIFFERENTIAL EXPRESSION #############
################################################

# Obter os nomes das sondas
probes <- rownames(my_exp)

## BIOMART
listMarts() # lista os bancos de dados
ensembl <- useMart("ENSEMBL_MART_ENSEMBL")
dat <- listDatasets(ensembl)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")

# Obter os ids correspondentes as sondas com o biomaRt
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")
att <- listAttributes(ensembl)

ids <- getBM(attributes = c("affy_hg_u133_plus_2", "ensembl_gene_id", "entrezgene", "hgnc_symbol"),
             filters = 'affy_hg_u133_plus_2',
             values = probes,
             mart = ensembl)

entrez <- ids$entrezgene
symbol <- ids$hgnc_symbol

# O mapeamento tambem pode ser feito pelo db da plataforma:
library(hgu133plus2.db)
x <- hgu133plus2ENTREZID
entrez <- unlist(as.list(x[rownames(my_exp)]))
x <- hgu133plus2SYMBOL
symbol <- unlist(as.list(x[rownames(my_exp)]))

entrez <- ids$entrezgene
symbol <- ids$hgnc_symbol

# Estabelecer os grupos
targets <- as.factor(rep(c("tr_0", "tr_8", "tr_16", "tr_24", "tr_48", "tr_96"), 3))

# Criar a matriz design
design <- model.matrix(~ 0 + targets)
colnames(design) <- c("tr_0", "tr_16", "tr_24", "tr_48", "tr_8", "tr_96")

# Modelo linear
fit <- lmFit(my_exp, design)

# Criar listas com os ids correspondentes as probes
fit$genes$entrez <- entrez
fit$genes$symbol <- symbol

# Estabelecer os contrastes
# Neste momento, estabelecer as comparacoes entre os grupos 
# a fim de obter os valores de expressao diferencial
contrasts <- makeContrasts(tr_8-tr_0, tr_16-tr_8, tr_24-tr_16, tr_48-tr_24, tr_96-tr_48,
                           levels=design)

# Estatistica bayesiana
ct.fit <- eBayes(contrasts.fit(fit, contrasts))
res.fit <- decideTests(ct.fit, method = "global", adjust.method = "BH", p.value = 0.001)

# Combinar os resultados do limma em um unico dataset
SH.limma <- data.frame( entrez= ct.fit$genes$entrez, symbol = ct.fit$genes$symbol,
                        logFC = ct.fit$coef, p.value = ct.fit$p.value, 
                        degenes = unclass(res.fit), stringsAsFactors = FALSE)


# Seleção dos genes diferencialmente expressos
features <- rowSums(res.fit!=0) > 0
features <- names(features)[features]

# Filtrar e obter a tabela dos genes diferencialmente expressos
DEexp <- my_exp[features, ]
DElimma <- SH.limma[rownames(DEexp), ]
DElimma <- DElimma[complete.cases(DElimma), ]
save(DElimma, DEexp, SH.limma, features, file="SH.limmaREF.RData")







