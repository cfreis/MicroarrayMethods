dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
fdata <- fdata %>%
filter(!duplicated(!!probe_col))
dup <- sum(duplicated(!!probe_col))
prop <- round(sum(probes_in) / length(unique(fdata[,probe_col])) * 100, digits = 2)
message(prop, "% of probes mapping to different ", (!!ref_col), " were removed. Also," dup, "duplicated probes in fdata were removed.")
return(fdata)
}
#'
#' @param eset ExpressionSet object
#' @param fdata Feature data (dataframe) with unique rows. The output of get_annotation() function
#' @param probe_col Probe column name in fdata dataframe
#' @param ref_col Column name of the reference id to be counted for each probe.
#'
#' @return ExpressionSet object with filtered assayData slot for promiscous probes
#' @export
#'
#' @examples
remove_probes <- function(fdata, probe_col, ref_col = "hgnc_symbol") {
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
fdata <- fdata %>%
filter(!duplicated(!!probe_col))
dup <- sum(duplicated(!!probe_col))
prop <- round(sum(probes_in) / length(unique(fdata[,probe_col])) * 100, digits = 2)
message(prop, "% of probes mapping to different ", (!!ref_col), " were removed. Also,", dup, "duplicated probes in fdata were removed.")
return(fdata)
}
ann <- remove_probes(annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol")
#'
#' @param eset ExpressionSet object
#' @param fdata Feature data (dataframe) with unique rows. The output of get_annotation() function
#' @param probe_col Probe column name in fdata dataframe
#' @param ref_col Column name of the reference id to be counted for each probe.
#'
#' @return ExpressionSet object with filtered assayData slot for promiscous probes
#' @export
#'
#' @examples
remove_probes <- function(fdata, probe_col, ref_col = "hgnc_symbol") {
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
fdata <- fdata %>%
filter(!duplicated(!!probe_col))
dup <- sum(duplicated(!!probe_col))
prop <- round(sum(probes_in) / length(unique(fdata[,probe_col])) * 100, digits = 2)
message(prop, "% of probes mapping to different ", ref_col, " were removed. Also,", dup, "duplicated probes in fdata were removed.")
return(fdata)
}
ann <- remove_probes(annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol")
#'
#' @param eset ExpressionSet object
#' @param fdata Feature data (dataframe) with unique rows. The output of get_annotation() function
#' @param probe_col Probe column name in fdata dataframe
#' @param ref_col Column name of the reference id to be counted for each probe.
#'
#' @return ExpressionSet object with filtered assayData slot for promiscous probes
#' @export
#'
#' @examples
remove_probes <- function(fdata, probe_col, ref_col = "hgnc_symbol") {
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
fdata <- fdata %>%
filter(!duplicated(!!id1))
dup <- sum(duplicated(!!id1))
prop <- round(sum(probes_in) / length(unique(fdata[,probe_col])) * 100, digits = 2)
message(prop, "% of probes mapping to different ", ref_col, " were removed. Also,", dup, "duplicated probes in fdata were removed.")
return(fdata)
}
ann <- remove_probes(annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol")
#'
#' @param eset ExpressionSet object
#' @param fdata Feature data (dataframe) with unique rows. The output of get_annotation() function
#' @param probe_col Probe column name in fdata dataframe
#' @param ref_col Column name of the reference id to be counted for each probe.
#'
#' @return ExpressionSet object with filtered assayData slot for promiscous probes
#' @export
#'
#' @examples
remove_probes <- function(fdata, probe_col, ref_col = "hgnc_symbol") {
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
fdata <- fdata %>%
filter(!duplicated((!!id1)))
dup <- sum(duplicated((!!id1)))
prop <- round(sum(probes_in) / length(unique(fdata[,probe_col])) * 100, digits = 2)
message(prop, "% of probes mapping to different ", ref_col, " were removed. Also,", dup, "duplicated probes in fdata were removed.")
return(fdata)
}
ann <- remove_probes(annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol")
probe_col <- "affy_hg_u133_plus_2"
ref_col <- "hgnc_symbol"
fdata <- annot_biomart
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
fdata <- fdata %>%
filter(!duplicated((!!id1)))
View(fdata)
anyDuplicated(fdata$affy_hg_u133_plus_2)
dup <- sum(duplicated((!!id1)))
#'
#' @param eset ExpressionSet object
#' @param fdata Feature data (dataframe) with unique rows. The output of get_annotation() function
#' @param probe_col Probe column name in fdata dataframe
#' @param ref_col Column name of the reference id to be counted for each probe.
#'
#' @return ExpressionSet object with filtered assayData slot for promiscous probes
#' @export
#'
#' @examples
remove_probes <- function(fdata, probe_col, ref_col = "hgnc_symbol") {
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
dup <- sum(duplicated(fdata[,probe_col]))
fdata <- fdata %>%
filter(!duplicated((!!id1)))
prop <- round(sum(probes_in) / length(unique(fdata[,probe_col])) * 100, digits = 2)
message(prop, "% of probes mapping to different ", ref_col, " were removed. Also,", dup, "duplicated probes in fdata were removed.")
return(fdata)
}
ann <- remove_probes(annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol")
#'
#' @param eset ExpressionSet object
#' @param fdata Feature data (dataframe) with unique rows. The output of get_annotation() function
#' @param probe_col Probe column name in fdata dataframe
#' @param ref_col Column name of the reference id to be counted for each probe.
#'
#' @return ExpressionSet object with filtered assayData slot for promiscous probes
#' @export
#'
#' @examples
remove_probes <- function(fdata, probe_col, ref_col = "hgnc_symbol") {
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
dup <- sum(duplicated(fdata[,probe_col]))
fdata <- fdata %>%
filter(!duplicated((!!id1)))
prop <- round(sum(probes_in) / length(unique(fdata[,probe_col])) * 100, digits = 2)
message(prop, "% of probes mapping to different ", ref_col, " were removed. Also, ", dup, " duplicated probes in fdata were removed.")
return(fdata)
}
ann <- remove_probes(annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol")
View(ann)
#'
#' @param eset ExpressionSet object
#' @param fdata Feature data (dataframe) with unique rows. The output of get_annotation() function
#' @param probe_col Probe column name in fdata dataframe
#' @param ref_col Column name of the reference id to be counted for each probe.
#'
#' @return ExpressionSet object with filtered assayData slot for promiscous probes
#' @export
#'
#' @examples
remove_probes <- function(eset, fdata, probe_col, ref_col = "hgnc_symbol") {
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
dup <- sum(duplicated(fdata[,probe_col]))
fdata <- fdata %>%
dplyr::filter(!duplicated((!!id1)))
prop <- round(sum(probes_in) / length(unique(fdata[,probe_col])) * 100, digits = 2)
eset <- eset[rownames(eset) %in% fdata[, probe_col], ]
Biobase::fData(eset) <- fdata
message(prop, "% of probes mapping to different ", ref_col, " were removed. Also, ", dup, " duplicated probes in fdata were removed.")
return(eset)
}
eset2 <- remove_probes(eset, annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol")
View(eset2)
#'
#' @param eset ExpressionSet object
#' @param fdata Feature data (dataframe) with unique rows. The output of get_annotation() function
#' @param probe_col Probe column name in fdata dataframe
#' @param ref_col Column name of the reference id to be counted for each probe.
#'
#' @return ExpressionSet object with filtered assayData slot for promiscous probes
#' @export
#'
#' @examples
set_fdata <- function(eset, fdata, probe_col, ref_col = "hgnc_symbol", rm_probes = FALSE) {
fdata <- unique(na.omit(fdata))
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
if(rm_probes) {
# Remove promiscuous probes
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
# Subset fdata
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
#
dup <- sum(duplicated(fdata[,probe_col]))
fdata <- fdata %>%
dplyr::filter(!duplicated((!!id1)))
prop <- round(sum(probes_in) / length(unique(fdata[,probe_col])) * 100, digits = 2)
eset <- eset[rownames(eset) %in% fdata[, probe_col], ]
Biobase::fData(eset) <- fdata
message(prop, "% of probes mapping to different ", ref_col, " were removed. Also, ", dup, " duplicated probes in fdata were removed.")
return(eset)
} else {
dup <- sum(duplicated(fdata[,probe_col]))
fdata <- fdata %>%
dplyr::filter(!duplicated((!!id1)))
eset <- eset[rownames(eset) %in% fdata[, probe_col], ]
Biobase::fData(eset) <- fdata
message(dup, " duplicated probes in fdata were removed.")
}
}
eset2 <- set_fdata(eset, annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol", rm_probes = TRUE)
#'
#' @param eset ExpressionSet object
#' @param fdata Feature data (dataframe) with unique rows. The output of get_annotation() function
#' @param probe_col Probe column name in fdata dataframe
#' @param ref_col Column name of the reference id to be counted for each probe.
#'
#' @return ExpressionSet object with filtered assayData slot for promiscous probes
#' @export
#'
#' @examples
set_fdata <- function(eset, fdata, probe_col, rm_probes = FALSE, ref_col = "hgnc_symbol") {
fdata <- unique(na.omit(fdata))
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
if(rm_probes) {
if(is.null(ref_col)) {
stop("Provide a reference column in order to remove probes that map to more than one id.")
}
# Remove promiscuous probes
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
# Subset fdata
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
#
dup <- sum(duplicated(fdata[,probe_col]))
fdata <- fdata %>%
dplyr::filter(!duplicated((!!id1)))
prop <- round(sum(probes_in) / length(unique(fdata[,probe_col])) * 100, digits = 2)
eset <- eset[rownames(eset) %in% fdata[, probe_col], ]
Biobase::fData(eset) <- fdata
message(prop, "% of probes mapping to different ", ref_col, " were removed. Also, ", dup, " duplicated probes in fdata were removed.")
return(eset)
} else {
dup <- sum(duplicated(fdata[,probe_col]))
fdata <- fdata %>%
dplyr::filter(!duplicated((!!id1)))
eset <- eset[rownames(eset) %in% fdata[, probe_col], ]
Biobase::fData(eset) <- fdata
message(dup, " duplicated probes in fdata were removed.")
}
}
eset2 <- set_fdata(eset, annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol", rm_probes = TRUE)
View(eset2)
eset1 <- set_fdata(eset, annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol")
#' @param eset
#' @param fdata
#' @param probe_col
#' @param rm_probes
#' @param ref_col
#'
#' @return
#' @export
#'
#' @examples
set_fdata <- function(eset, fdata, probe_col, rm_probes = FALSE, ref_col = "hgnc_symbol") {
fdata <- unique(na.omit(fdata))
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
if(rm_probes) {
if(is.null(ref_col)) {
stop("Provide a reference column in order to remove probes that map to more than one id.")
}
# Remove promiscuous probes
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
# Subset fdata
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
#
dup <- sum(duplicated(fdata[,probe_col]))
fdata <- fdata %>%
dplyr::filter(!duplicated((!!id1)))
prop <- round(sum(probes_in) / length(unique(fdata[,probe_col])) * 100, digits = 2)
eset <- eset[rownames(eset) %in% fdata[, probe_col], ]
Biobase::fData(eset) <- fdata
message(prop, "% of probes mapping to different ", ref_col, " were removed. Also, ", dup, " duplicated probes in fdata were removed.")
return(eset)
} else {
dup <- sum(duplicated(fdata[,probe_col]))
fdata <- fdata %>%
dplyr::filter(!duplicated((!!id1)))
eset <- eset[rownames(eset) %in% fdata[, probe_col], ]
Biobase::fData(eset) <- fdata
message(dup, " duplicated probes in fdata were removed.")
return(eset)
}
}
eset1 <- set_fdata(eset, annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol")
View(eset1)
View(annot_biomart)
sum(duplicated(annot_biomart$affy_hg_u133_plus_2))
eset1 <- set_fdata(eset, annot_biomart, probe_col = "affy_hg_u133_plus_2")
#' @param eset
#' @param fdata
#' @param probe_col
#' @param rm_probes
#' @param ref_col
#'
#' @return
#' @export
#'
#' @examples
set_fdata <- function(eset, fdata, probe_col, rm_probes = FALSE, ref_col = "hgnc_symbol") {
fdata <- unique(na.omit(fdata))
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
if(rm_probes) {
if(is.null(ref_col)) {
stop("Provide a reference column in order to remove probes that map to more than one id.")
}
# Remove promiscuous probes
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
# Subset fdata by probes that are not promiscuous
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
# Filter fdata containg not-duplicated values
dup <- sum(duplicated(fdata[,probe_col]))
fdata <- fdata %>%
dplyr::filter(!duplicated((!!id1)))
# Calculate proportion of promiscuous probes removed from feature data
prop <- round(sum(probes_in) / length(unique(fdata[,probe_col])) * 100, digits = 2)
# Filter assayData by feature data and assign fData
eset <- eset[rownames(eset) %in% fdata[, probe_col], ]
Biobase::fData(eset) <- fdata
message(prop, "% of probes mapping to different ", ref_col, " were removed. Also, ", dup, " duplicated probes in feature data were removed.")
return(eset)
} else {
# Filter fdata containg not-duplicated values
dup <- sum(duplicated(fdata[,probe_col]))
fdata <- fdata %>%
dplyr::filter(!duplicated((!!id1)))
# Filter assayData by feature data and assign fData
eset <- eset[rownames(eset) %in% fdata[, probe_col], ]
Biobase::fData(eset) <- fdata
message(dup, " duplicated probes in feature data were removed.")
return(eset)
}
}
eset2 <- set_fdata(eset2, annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol", rm_probes = TRUE)
eset2 <- set_fdata(eset2, annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol", rm_probes = TRUE)
eset2 <- set_fdata(eset2, annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol", rm_probes = TRUE)
View(eset2)
#' Remove promiscuous probes that map to different reference ids (usually gene symbols).
#'
#' @param fdata Feature data (dataframe) with unique rows. The output of get_annotation() function
#' @param probe_col Probe column name in fdata dataframe
#' @param ref_col Column name of the reference id to be counted for each probe.
#'
#' @return ExpressionSet object with filtered assayData slot for promiscous probes
#' @export
#'
#' @examples
remove_probes <- function(fdata, probe_col, ref_col = "hgnc_symbol") {
fdata <- unique(na.omit(fdata))
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
# Remove promiscuous probes
id1 <- dplyr::sym(probe_col)
id2 <- dplyr::sym(ref_col)
rem_probes <- fdata %>%
dplyr::group_by((!!id1)) %>%
dplyr::summarise(c = dplyr::n_distinct((!!id2))) %>%
dplyr::filter(c > 1) %>%
dplyr::select((!!id1)) %>%
unlist(use.names = F)
# Subset fdata by probes that are not promiscuous
probes_in <- fdata[,probe_col] %in% rem_probes
fdata <- fdata[!probes_in,]
# Filter fdata containing not-duplicated values
dup <- sum(duplicated(fdata[,probe_col]))
fdata <- fdata %>%
dplyr::filter(!duplicated((!!id1)))
message(dup, " duplicated probes in feature data were removed.")
return(fdata)
}
teste <- remove_probes(annot_biomart, probe_col = "affy_hg_u133_plus_2")
anyDuplicated(teste$affy_hg_u133_plus_2)
devtools::document()
library(MicroarrayMethods)
devtools::document()
devtools::document()
library(MicroarrayMethods)
library(MicroarrayMethods)
celfiles <- "~/Área de Trabalho/exp1/"
# Read CEL files
raw <- import_celfiles(celfiles_path = celfiles, pheno_data = "samples.txt", sep = "\t")
# Plot densities
limma::plotDensities(raw@assayData$exprs, legend = FALSE, main = "Raw data samples density plot")
# Boxplot
oligo::boxplot(raw, las = 2, main = "")
# RNA degradation plot
deg <- AffyRNAdeg(raw)
plotAffyRNAdeg(deg)
# NORMALIZED DATA
# Normalize with RMA method
eset <- affy::rma(raw)
# Get probes annotation
feature_data <- get_annotation(dataset = "hsapiens_gene_ensembl", platform = "affy_hg_u133_plus_2")
# Set annotation in to eset and remove promiscuous probes and dual notations
eset <- set_fdata(eset, annot_biomart, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol", rm_probes = TRUE)
# Set annotation in to eset and remove promiscuous probes and dual notations
eset <- set_fdata(eset, feature_data, probe_col = "affy_hg_u133_plus_2", ref_col = "hgnc_symbol", rm_probes = TRUE)
View(eset)
eset@a <- a
# PCA
plot_pca(eset, components = c(1,2), groups = "group", batch = "batch")
# Get probes annotation
feature_data <- get_annotation(dataset = "hsapiens_gene_ensembl", platform = "affy_hg_u133_plus_2")
View(feature_data)
# Set annotation in to eset and remove promiscuous probes and dual notations
eset <- set_fdata(eset, feature_data,
probe_col = "affy_hg_u133_plus_2",
ref_col = "hgnc_symbol",
rm_probes = TRUE)
View(eset)
